{
  "name": "hogan-express",
  "version": "0.5.1",
  "description": "Mustache template engine for express 3.x. Support partials and layout",
  "main": "hogan-express.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:vol4ok/hogan-express.git"
  },
  "keywords": [
    "mustache",
    "hogan",
    "partials",
    "layout",
    "template",
    "engine"
  ],
  "author": {
    "name": "Andrew Volkov",
    "email": "hello@vol4ok.net"
  },
  "license": "MIT",
  "dependencies": {
    "hogan.js": ">=2.0.0"
  },
  "devDependencies": {
    "coffee-script": "1.x.x",
    "colors": "0.6.x",
    "supertest": "~0.8.0",
    "cheerio": "~0.12.2",
    "expect.js": "~0.2.0",
    "express": "~3.4.0"
  },
  "readme": "## HOGAN-EXPRESS\n\n[Mustache][1] template engine for the [express 3.x][2] web framework.\n\nUses twitter's [hogan.js][3] engine.\n\nSupports\n  - Partials (Allows you to modularize, to move pieces of templates to their own file - think of these as \"included\" templates)\n  - Layouts (Allows you to consolidate common elements of your templates - think of these as \"parent\" templates)\n  - Caching (Makes your app more efficient by reducing unnecessary rendering)\n  - Lambdas (Allows you to create custom filters/lambdas)\n\n### Install\n\nInstall hogan-express using [npm][4]:\n\n`npm install hogan-express`\n\n### Usage\n\n#### Setup\nTo use hogan-express, map the file extension of your choice to the\nhogan-express engine in your app setup.  For example:\n\n```coffeescript\napp.set 'view engine', 'html'    # use .html extension for templates\napp.set 'layout', 'layout'       # use layout.html as the default layout\napp.set 'partials', foo: 'foo'   # define partials available to all pages\napp.enable 'view cache'\napp.engine 'html', require('hogan-express')\n```\n\n#### Rendering a template\n\nWithin your app route callback, define `res.locals` and call `res.render`, passing any partials required by your template.  For example:\n\n```coffeescript\napp.get '/', (req,res)->\n  res.locals = name: 'Andrew'\n  res.render 'template', partials: {message: 'message'}\n```\n\nThis would render the layout (`layout.html`, defined in setup) using the template (`template.html`) and the specified partials (`message.html`).\n\nIf `layout.html` contained:\n\n```html\n<p>\n  <strong>Message Layout</strong>\n  {{{ yield }}}\n</p>\n```\n\nand `template.html` contained:\n\n```html\n<em>{{ name }} says {{> message }}</em>\n```\n\nand `message.html` contained:\n\n```html\nHello World.\n```\n\nthe callback would produce:\n\n```html\n<p>\n  <strong>Message Layout</strong>\n  <em>Andrew says Hello World.</em>\n</p>\n```\n\nThe special `{{{ yield }}}` variable in `layout.html` indicates the location in your layout file where your template is rendered.  You can define your layout using `app.set 'layout', ...` or specify it when calling `res.render`.  If a layout is not provided, the template is rendered directly.\n\n#### Custom yield tags\n\nYou can define more extension points in `layout.html` using custom tags ``{{yield-<name>}}``.  For example:\n\nlayout:\n\n```html\n<head>\n  ...\n  {{{yield-styles}}}\n  {{{yield-scripts}}}\n  ...\n</head>\n```\n\nindex:\n\n```html\n{{#yield-styles}}\n  <style>\n    ...\n  </style>\n{{/yield-styles}}\n\n{{#yield-scripts}}\n  <script>\n    ...\n  </script>\n{{/yield-scripts}}\n```\n\nThe page `index.html` will be rendered into ``{{yield}}`` without the content in ``{{#yield-styles}}...{{/yield-styles}`` and ``{{#yield-scripts}}...{{/yield-scripts}}``. That content goes into accordingly named tags in `layout.html`.  If ``{{{yield-styles}}}`` is missing, the styles tag content will not be rendered.\n\n#### Custom layouts\n\nTo render a page with custom layout, just specify it in the options: `res.render \"admin.html\", layout: \"admin-layout\"`\n\n#### Custom Lambdas / Filters\n\nTo create custom filters (or lambdas) you can just specify your filter functions in the options:\n\n```coffeescript\napp.get '/', (req,res)->\n\n  res.locals = myDefaultLabel: \"oops\" # here to show a little of how scoping works\n\n  res.render 'template',\n    message: 'This is a message. HERE.'\n    mylist: [{label: \"one\", num: 1},{label: \"two\", num: 2},{num: 3}]\n\n    lambdas:\n     lowercase: (text) ->\n       return text.toLowerCase()\n     reverseString: (text) ->\n       return text.split(\"\").reverse().join(\"\")\n```\n\ntemplate:\n\n```html\n<p>Lowercase <strong>{{message}}</strong>: {{#lambdas.lowercase}}{{message}}{{/lambdas.lowercase}}</p>\n<ul>\n  {{#mylist}}\n  <li>{{num}}: {{label}} is {{#reverseString}}{{label}}{{#reverseString}} in reverse.</li>\n  {{/mylist}}\n</ul>\n```\n\nrendered html:\n\n```html\n<p>Lowercase <strong>This is a message. HERE.</strong>: this is a message. here.</p>\n<ul>\n  <li>1: one is eno in reverse.</li>\n  <li>2: two is owt in reverse.</li>\n  <li>3: oops is spoo in reverse.</li>\n</ul>\n```\n\n### Contributors\n\n[Contributors list](https://github.com/vol4ok/hogan-express/graphs/contributors)\n\nThank you for your participation!\n\n### License\nhogan-express is released under an [MIT License][5].\n\n[1]: http://mustache.github.io/mustache.5.html\n[2]: http://expressjs.com/\n[3]: https://github.com/twitter/hogan.js\n[4]: https://npmjs.org/\n[5]: http://opensource.org/licenses/MIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/vol4ok/hogan-express/issues"
  },
  "_id": "hogan-express@0.5.1",
  "_from": "hogan-express@*"
}
