{
  "author": {
    "name": "Evernote"
  },
  "name": "evernote",
  "description": "Evernote SDK for Node.js",
  "version": "1.25.1",
  "repository": {
    "url": "https://github.com/evernote/evernote-sdk-js"
  },
  "main": "index",
  "directories": {
    "lib": "evernote-sdk-js",
    "example": "sample"
  },
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "oauth": "*"
  },
  "readme": "Evernote SDK for JavaScript\n==================================\nEvernote API version 1.25\n\nWhat is this\n--------------\nA JavaScript API around the Evernote Cloud API.\n\nRequired reading\n----------------\nPlease check out the [Evernote Developers portal page](http://dev.evernote.com/documentation/cloud/).\n\nInstalling\n----------\n\nGet the minified version of the SDK [here](https://github.com/evernote/evernote-sdk-js/blob/master/evernote-sdk-js/production/evernote-sdk-minified.js).\n\n### Use OAuth for authentication\n\nWe recommend using the jsOAuth library for OAuth. It can be downloaded [here](https://github.com/bytespider/jsOAuth).\n\nDetails on the OAuth process are available [here](http://dev.evernote.com/start/core/authentication.php).\n\nHere are the basic steps for OAuth using the jsOAuth library.\n\n(Change this to http://www.evernote.com, when you are ready to activate on production).\n    \n    var hostName = \"http://sandbox.evernote.com\"; \n\nStep 1:\n\n    var options,oauth;\n     options = {\n        consumerKey: <your consumer key>,\n        consumerSecret: <your consumer secret>,\n        callbackUrl : <your callback url>,\n        signatureMethod : \"HMAC-SHA1\",\n    };\n    oauth = OAuth(options);\n    oauth.request({'method': 'GET', 'url': hostName + '/oauth', 'success': success, 'failure': failure});\n\nStep 2:\n\n   In the callback `success`, get the `oauth_token` and the `oauth_token_secret`.\n   Redirect the user for authorization to :  `evernoteHostName + '/OAuth.action?oauth_token=' + <token from step 1>`\n\nStep 3:\n\nIn your callback url, get the `oauth_verifier` and the `oauth_token` from the query string.\n\n    var verifier = <your verifier>;\n    var oauth_token = <your oauth token>;\n    var secret = <oauth secret from step 1>;\n    oauth.setVerifier(verifier);\n    oauth.setAccessToken([got_oauth,secret]);\n\nNow get the final token.\n\n    oauth.request({'method': 'GET', 'url': hostName + '/oauth',\n                   'success': success, 'failure': failure});\n\nStep 4:\n\n  Parse the `success` callback to get the authentication token.\n\n### Example\n\nOnce you get the authentication token, note store URL and user store URL from the OAuth step,\n\n    var noteStoreURL = <note store url>;\n    var authenticationToken = <authentication token>;\n    var noteStoreTransport = new Thrift.BinaryHttpTransport(noteStoreURL);\n    var noteStoreProtocol = new Thrift.BinaryProtocol(noteStoreTransport);\n    var noteStore = new NoteStoreClient(noteStoreProtocol);\n\n    noteStore.listNotebooks(authenticationToken, function (notebooks) {\n    \t\tconsole.log(notebooks);\n    \t},\n    \tfunction onerror(error) {\n    \t\tconsole.log(error);\n    \t}\n    );\n\nUse with Node\n-------------\n\n### Install\n\nYou can install the module using npm.\n```sh\nnpm install evernote\n```\n### OAuth ###\n```javascript\nvar client = new Evernote.Client.new({\n  consumerKey: 'YOUR API CONSUMER KEY',\n  consumerSecret: 'YOUR API CONSUMER SECRET',\n  sandbox: [true or false] // Optional (default: true)\n});\nclient.getRequestToken('YOUR CALLBACK URL', function(error, oauthToken, oauthTokenSecret, results) {\n  // store tokens in the session\n  // and then redirect to client.getAuthorizeUrl(oauthToken)\n});\n```\nTo obtain the access token\n```javascript\nclient.getAccessToken(oauthToken, oauthTokenSecret, oauthVerifier, function(error, oauthAccessToken, oauthAccessTokenSecret, results) {\n  // store 'oauthAccessToken' somewhere\n});\n```\nNow you can make other API calls\n```javascript\nvar client = new Evernote.Client({token: oauthAccessToken});\nvar noteStore = client.getNoteStore();\nnotebooks = noteStore.listNotebooks(function(err, notebooks) {\n  // run this code\n});\n```\n\nYou can see the actual OAuth sample code in `sample/express`.\n\n### UserStore ###\nOnce you acquire token, you can use UserStore. For example, if you want to call UserStore.getUser:\n```javascript\nvar client = new Evernote.Client(token: token);\nvar userStore = client.getUserStore();\nuserStore.getUser(function(err, user) {\n  // run this code\n});\n```\nYou can omit authenticationToken in the arguments of UserStore/NoteStore functions.\n\n### NoteStore ###\nIf you want to call NoteStore.listNotebooks:\n```javascript\nvar noteStore = client.getNoteStore();\nnoteStore.listNotebooks(function(err, notebooks) {\n  // run this code\n});\n```\n\n### NoteStore for linked notebooks ###\nIf you want to get tags for linked notebooks:\n```javascript\nvar linkedNotebook = noteStore.listLinkedNotebooks[0]; // any notebook\nvar sharedNoteStore = client.sharedNoteStore(linkedNotebook);\nsharedNoteStore.getSharedNotebookByAuth(function(err, sharedNotebook) {\n  sharedNoteStore.listTagsByNotebook(err2, sharedNotebook.notebookGuid, function(tags) {\n    // run this code\n  });\n});\n```\n\n### NoteStore for Business ###\nIf you want to get the list of notebooks in your business account:\n```javascript\nuserStore.getUser(function(err, user) {\n  if (user.isBusinessUser) {\n    client.getBusinessNoteStore().listNotebooks(function(err, notebooks) {\n      // run this code\n    });\n  }\n});\n```\n\nUtility methods for Business\n----------------------------\nThis module provides some utility methods to deal with Evernote Business.\n\n### List business notebooks ###\nTo list all business notebooks the user can access\n```javascript\nvar client = new Evernote.Client({token: token})\nclient.listBusinessNotebooks(function(err, businessNotebooks) {\n  // run this code\n});\n```\n\n### Create a business note ###\nTo create a business note in a business notebook\n```javascript\nvar note = new Evernote.Note();\nclient.listBusinessNotebooks(function(err, notebooks) {\n  client.createNoteInBusinessNotebook(note, businessNotebooks[0], function(err, createdNote) {\n    // run this code\n  });\n});\n```\n\n### Create a business notebook ###\nTo create a business notebook\n```javascript\nvar notebook = new Evernote.Notebook();\nclient.createBusinessNotebook(notebook, function(err, createdNotebook) {\n  // run this code\n});\n```\n\n### Get a notebook corresponding to the given business notebook ###\n```javascript\nclient.listBusinessNotebooks(function(err, businessNotebooks) {\n  client.getCorrespondingNotebook(businessNotebooks[0], function(err, notebook) {\n    // run this code\n  });\n});\n```\n\n### Determine if the user is a part of a business ###\n```javascript\nuser.isBusinessUser();\n```\n\n### Example\n\nYou can find a simple client app and a sample app with express under 'sample/express'. Please note that you have to use `NodeBinaryHttpTransport` instead of `BinaryHttpTransport`.\n\nFAQ\n---\n\n### Does the API support CORS (Cross origin resource sharing)\n\nNot yet. However, there are an increasing number of platforms(phonegap,node.js, etc) that use JavaScript as their language. This SDK works well with those platforms.\n\n### Can I test my code in the browser\n\nYes. You can test your code in Chrome. Open Chrome using open /Applications/Google\\ Chrome.app/ --args --disable-web-security . \n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/evernote/evernote-sdk-js/issues"
  },
  "_id": "evernote@1.25.1",
  "_from": "evernote@*"
}
